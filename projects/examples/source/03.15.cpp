///////////////////////////////////////////////////////////////////////////////////////

// support : Boost.CompressedPair

///////////////////////////////////////////////////////////////////////////////////////

class Entity_v1 {}; //!!!хоть и пустой, но в памяти занимает 1 байт чтобы можно было множество таких пустых классов сложить в массив 

///////////////////////////////////////////////////////////////////////////////////////
//!!!entity_v1 пустой объект но он все равно занимает байт => Entity_v2 занимает 2 байта
class Entity_v2 { public : char x = '\0';                       Entity_v1 entity_v1; };

//!!!Entity_v3  занимает 1 байт спецификатор [[no_unique_address]] говорит если entity_v1 пустой то не выделять под него память,
//но использовать его можно, потому что он как бы присоединяется под выделенный байт для переменной char  
class Entity_v3 { public : char x = '\0'; [[no_unique_address]] Entity_v1 entity_v1; };

///////////////////////////////////////////////////////////////////////////////////////

class Client_v1 : public 		 Entity_v1 {};

class Client_v2 : public virtual Entity_v1 {};

class Server_v1 : public 		 Entity_v1 {};

class Server_v2 : public virtual Entity_v1 {};

///////////////////////////////////////////////////////////////////////////////////////

class Router_v1 : public Client_v1, public Server_v1 {};
//!!!тут создается две заглушки для двух Entity (нет виртуального наследования) для остальных созданных пустых объектов заглушки не нужны,
//потому что мы уже можем использовать перемещение в массиве экземпляров
//empty base optimization
class Router_v2 : public Client_v2, public Server_v2 {};

///////////////////////////////////////////////////////////////////////////////////////

int main()
{
	static_assert(sizeof(Entity_v1) == 1);

//  --------------------------------------

	static_assert(sizeof(Entity_v2) == 2);

	static_assert(sizeof(Entity_v3) == 1);

//  --------------------------------------

	static_assert(sizeof(Router_v1) == 2);

	static_assert(sizeof(Router_v2) != 1); //тут происходит выравнивание по 8 байтовой границе
	//virtual занимает еще 16 служебных байт + 1 для пустышки + выравнивание по 8 в итоге 24 байтов(7 последних нулевые)
}

///////////////////////////////////////////////////////////////////////////////////////