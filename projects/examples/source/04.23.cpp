////////////////////////////////////////////////////////////////////

#include <cassert>
#include <cmath>
#include <string>
#include <tuple>

////////////////////////////////////////////////////////////////////

using namespace std::literals;

////////////////////////////////////////////////////////////////////

auto equal(double x, double y, double epsilon = 1e-6)
{
	return std::abs(x - y) < epsilon;
}

////////////////////////////////////////////////////////////////////

int main()
{
    auto tuple = std::make_tuple(1, 2.0, "aaaaa"s);

//  ----------------------------------------------------------------

	static_assert(std::tuple_size_v < decltype(tuple) > == 3);

//  ----------------------------------------------------------------

    assert(std::get < 0 > (tuple) == 1);

//  ----------------------------------------------------------------

    auto z = 0.0;

//  ----------------------------------------------------------------

    std::tie(std::ignore, z, std::ignore) = tuple;

//  ----------------------------------------------------------------

    assert(equal(z, 2.0));

//  ----------------------------------------------------------------

    auto const & [x, y, string] = tuple; // support : cppinsights.io

//  ----------------------------------------------------------------

    assert(x == 1 && equal(y, 2.0) && string == "aaaaa");
}

////////////////////////////////////////////////////////////////////