/////////////////////////////////////////////////////////////////////////////////////////

#include <cassert>
#include <ostream>
#include <sstream>

/////////////////////////////////////////////////////////////////////////////////////////

template < typename T > struct View 
{
    T const & x;
};

/////////////////////////////////////////////////////////////////////////////////////////

template < typename T > auto & operator<<(std::ostream & stream, View < T > const & view)
{
    return stream << view.x << ' ';
}

/////////////////////////////////////////////////////////////////////////////////////////

auto test(auto ... xs)
{
//  return (std::stringstream() << ... <<      xs ).str(); // bad

    return (std::stringstream() << ... << View(xs)).str();
}

/////////////////////////////////////////////////////////////////////////////////////////

int main()
{
    assert(test(1, 2.0, "aaaaa") == "1 2 aaaaa ");
}

/////////////////////////////////////////////////////////////////////////////////////////