/////////////////////////////////////////////////////////////////////////////

template < int X, int D > struct Handler
{
	constexpr static auto value = X % D != 0 && Handler < X, D - 1 > ::value;
};

/////////////////////////////////////////////////////////////////////////////

template < int X > struct Handler < X, 2 >
{
	constexpr static auto value = X % 2 != 0;
};

/////////////////////////////////////////////////////////////////////////////

template < int X > struct Is_Prime
{
	constexpr static auto value = Handler < X, X / 2 > ::value;
};

/////////////////////////////////////////////////////////////////////////////

template <> struct Is_Prime < 1 > { constexpr static bool value = 0; };

template <> struct Is_Prime < 2 > { constexpr static bool value = 1; };

template <> struct Is_Prime < 3 > { constexpr static bool value = 1; };

/////////////////////////////////////////////////////////////////////////////

template < int X > constexpr auto is_prime_v = Is_Prime < X > ::value;

/////////////////////////////////////////////////////////////////////////////

int main()
{
	static_assert(is_prime_v < 5 > );
}

/////////////////////////////////////////////////////////////////////////////