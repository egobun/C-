/////////////////////////////////////////////////////////////////////////////////////

#include <cassert>
#include <cmath>
#include <numbers>

/////////////////////////////////////////////////////////////////////////////////////

template < typename T > T pi = T(3.141'592'653'589'793'238'462'643'383'279'502'884l);

/////////////////////////////////////////////////////////////////////////////////////

template < typename T > auto calculate(T radius)
{
	return pi < T > * radius * radius;
}

/////////////////////////////////////////////////////////////////////////////////////

auto equal(double x, double y, double epsilon = 1e-6)
{
	return std::abs(x - y) < epsilon;
}

/////////////////////////////////////////////////////////////////////////////////////

int main()
{
	assert(calculate(1) == 3);

//  --------------------------------------------------------------
	
	assert(equal(calculate(1.0), pi < double > ));

//  --------------------------------------------------------------

	assert(equal(pi < double > , std::numbers::pi_v < double > ));
}

/////////////////////////////////////////////////////////////////////////////////////